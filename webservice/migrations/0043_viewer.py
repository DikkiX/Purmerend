# Generated by Django 3.2.10 on 2021-12-23 09:27
import os
from django.db import migrations, models


def migrate_viewers_from_environment_variables(apps, _):
    # Read existing environment variables and create viewers
    Viewer = apps.get_model('webservice', 'Viewer')

    if os.getenv('SMARTSTREET_USER'):
        Viewer.objects.create(
            type='STREET_SMART',
            label='Street smart',
            username=os.getenv('SMARTSTREET_USER'),
            password=os.getenv('SMARTSTREET_PASSWORD'),
            api_key=os.getenv('SMARTSTREET_API_KEY'),
            internal=True
        )

    if os.getenv('GOOGLE_MAPS_API_KEY'):
        Viewer.objects.create(
            type='GOOGLE_MAPS',
            label='Google Maps',
            api_key=os.getenv('GOOGLE_MAPS_API_KEY'),
            internal=False
        )


class Migration(migrations.Migration):

    dependencies = [
        ('webservice', '0042_auto_20211118_1341'),
    ]

    operations = [
        migrations.CreateModel(
            name='Viewer',
            fields=[
                ('id', models.AutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.PositiveIntegerField(
                    db_index=True, default=0, verbose_name='Sortering')),
                ('label', models.CharField(max_length=128)),
                ('type', models.CharField(choices=[('GOOGLE_MAPS', 'Google Maps'), ('STREET_SMART', 'Street Smart'), (
                    'OBLIQUO', 'Obliquo')], default='GOOGLE_MAPS', max_length=20, verbose_name='Type')),
                ('username', models.CharField(blank=True, max_length=128, null=True)),
                ('password', models.CharField(blank=True, max_length=128, null=True)),
                ('api_key', models.CharField(blank=True, max_length=128, null=True)),
                ('url', models.CharField(blank=True, max_length=255, null=True)),
                ('internal', models.BooleanField(
                    default=True, help_text='Is alleen zichtbaar binnen interne omgeving.', verbose_name='Alleen intern zichtbaar')),
            ],
            options={
                'verbose_name': 'Viewer',
                'verbose_name_plural': 'Viewers',
                'ordering': ['label'],
            },
        ),
        migrations.RunPython(
            migrate_viewers_from_environment_variables, migrations.RunPython.noop),
    ]
