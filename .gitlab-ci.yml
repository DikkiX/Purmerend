stages:
  - Test
  - Build
  - Deploy

variables:
  REVIEW_BASE_DOMAIN: delta10-review.nl
  FF_NETWORK_PER_BUILD: "true"

Test:
  stage: Test
  image: python:3.11
  services:
    - postgres:15.3-alpine
  variables:
    DB_HOST: postgres
    DB_NAME: postgres
    DB_PASSWORD: postgres
    DB_USER: postgres
    DJANGO_SETTINGS_MODULE: atlas.settings
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    POSTGRES_PASSWORD: postgres
    SECRET_KEY: somethingverysecret
  cache:
    paths:
      - $CI_PROJECT_DIR/.cache/pip
  before_script:
    - pip install -r requirements.txt
    - python manage.py collectstatic --noinput
  script:
    - python -m prospector -X
    - python -m coverage run manage.py test
    - python -m coverage report && python -m coverage html
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"
  artifacts:
    expire_in: 1 month
    paths:
      - htmlcov

Lint ui:
  stage: Test
  image: node:19.7.0-alpine
  cache:
    paths:
      - ui/node_modules/
  before_script:
    - cd ui/
    - npm install
  script:
    - npm run lint

Build:
  stage: Build
  image: docker:24.0.2-git
  services:
    - docker:24.0.2-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - export ATLAS_VERSION=$(git describe --tags)
    - docker build --build-arg ATLAS_VERSION=$ATLAS_VERSION -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

Deploy Docker latest tag:
  stage: Deploy
  image: docker:24.0.2
  services:
    - docker:24.0.2-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - master

Deploy Docker version tag:
  stage: Deploy
  image: docker:24.0.2-git
  services:
    - docker:24.0.2-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - export ATLAS_VERSION=$(git describe --tags)
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$ATLAS_VERSION
    - docker push $CI_REGISTRY_IMAGE:$ATLAS_VERSION
  only:
    - tags

Deploy acceptance:
  stage: Deploy
  image: registry.gitlab.com/commonground/core/review-app-deployer:latest
  script:
    - |
      kubectl config get-contexts
      kubectl config use-context purmerend/atlas:review
      cd helm/
      helm dependency update
      helm upgrade --install atlas-acc . \
      --namespace atlas-acc \
      --create-namespace \
      --set image.repository=$CI_REGISTRY_IMAGE \
      --set image.tag=$CI_COMMIT_SHA \
      --set allowedHosts=atlas-acc.$REVIEW_BASE_DOMAIN \
      --set secretKey=$SECRET_KEY \
      --set dbHost=atlas-acc-postgresql \
      --set ingress.hosts[0].host=atlas-acc.$REVIEW_BASE_DOMAIN \
      --set ingress.hosts[0].paths[0].path=/atlas \
      --set ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
      --set persistence.media.storageClassName=standard-retain \
      --set smartstreetUser=$SMARTSTREET_USER \
      --set smartstreetPassword=$SMARTSTREET_PASSWORD \
      --set smartstreetApiKey=$SMARTSTREET_API_KEY \
      --set googleMapsApiKey=$GOOGLE_MAPS_API_KEY
  environment:
    name: review/acc
    url: https://atlas-acc.$REVIEW_BASE_DOMAIN/atlas/
  only:
    - master@purmerend/atlas
